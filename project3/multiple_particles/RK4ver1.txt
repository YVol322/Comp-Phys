void trap::RK4(double dt)
{
    time(0) = 0;
    for(int i = 0; i<n; i++)
    {
        current_time = dt * (i + 1);
        for(int j = 0; j<N;j++)
        {
            rtemp = r.col(j);
            vtemp = v.col(j);


            k1r.col(j) = v.col(j);
            k1v.col(j) = total_force(j, 0, r, current_time)/particles[0].m_;

            r.col(j) = rtemp + k1r.col(j) * dt/2;
            v.col(j) = vtemp + k1v.col(j) * dt/2;

            k2r.col(j) =  v.col(j);
            k2v.col(j) = total_force(j, 0, r, current_time)/particles[0].m_;

            r.col(j) = rtemp + k2r.col(j) * dt/2;
            v.col(j) = vtemp + k2v.col(j) * dt/2;

            k3r.col(j) = v.col(j);
            k3v.col(j) = total_force(j, 0, r, current_time)/particles[0].m_;

            r.col(j) = rtemp + k3r.col(j) * dt;
            v.col(j) = vtemp + k3v.col(j) * dt;

            k4r.col(j) = v.col(j);
            k4v.col(j) = total_force(j, 0, r, current_time)/particles[0].m_;

            kravg.col(j) = 1./6 * (k1r.col(j) + 2 * k2r.col(j) + 2 * k3r.col(j) + k4r.col(j));
            kvavg.col(j) = 1./6 * (k1v.col(j) + 2 * k2v.col(j) + 2 * k3v.col(j) + k4v.col(j));

            r.col(j) = rtemp + kravg.col(j) * dt;
            v.col(j) = vtemp + kvavg.col(j) * dt;


            x(i+1, j) = r(0, j);
            vx(i+1, j) = v(0, j);

            y(i+1, j) = r(1,j);
            vy(i+1, j) = v(1,j);

            z(i+1, j) = r(2, j);
            vz(i+1, j) = v(2, j);
        }
    }   
}